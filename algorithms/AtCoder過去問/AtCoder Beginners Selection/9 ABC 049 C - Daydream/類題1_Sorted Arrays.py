# 長さNの配列Aが与えられる。
# Aを何カ所かで切って、Aの連続した部分であるようないくつかの数列に分ける。
# この時、各数列は全て、単調非減少または単調非増加な列になっている必要がある。
# 最小で、何個の数列に分ければよいか？

N = int(input())
A = list(map(int, input().split()))


# 端っこから順に考えると芋づる式に全体が決まっていくタイプの問題かも...!

ans = 0  # 初期値(最大では各Aを分ければ良し)
# Greety性を見いたせるか??「左から見ていく！」
i = 0
while i < N:
    # 右隣が同じにならないようにする
    while i + 1 < N and A[i] == A[i + 1]:
        i += 1
    # 右隣の数の方が大きかったら
    if i + 1 < N and A[i] < A[i + 1]:
        # 右隣の方が小さくなるまで、iを次に進める
        while i + 1 < N and A[i] <= A[i + 1]:
            i += 1  # whileを抜けたらans+=1へ

    # 右隣の数の方が小さかったら
    elif i + 1 < N and A[i] > A[i + 1]:
        # 右隣の数が大きくなるまで、iを次に進める
        while i + 1 < N and A[i] >= A[i + 1]:
            i += 1  # whileを抜けたらans+=1へ

    # a[i]まで切り取る
    ans += 1
    # i をインクリメントして、新しい配列の先頭とする
    i += 1
print(ans)
